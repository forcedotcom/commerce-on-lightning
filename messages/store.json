{
    "hubOrgAdminUsernameDescription": "username or alias for the dev hub org; overrides default dev hub org",
    "adminUsernameDescription": "username or alias for the target org; overrides default target org",
    "apiVersionDescription": "override the api version used for api requests made by this command",
    "definitionFileDescription": "path to a store definition file",
    "setup": {
        "scratchOrgBuyerUsernameDescription": "buyer's username",
        "cmdDescription": "Setup a store",
        "templateNameDescription": "template to use to create a site ",
        "buyerAliasDescription": "Buyer's alias",
        "buyerEmailDescription": "Buyer's email address",
        "storeNameDescription": "name of the site to create"
    },
    "create": {
        "cmdDescription": "Comprehensive create and set up a store.  This will create your community/store push store sources, create buyer user, import products, create search index.",
        "webStoreNotSupported": "'WebStore' is not supported",
        "automaticallySettingPermFailedPleaseDoItManually": "Automatically setting perm failed, please do it manually. \nIn the opened page, search for B2CLiteAccess and CommerceEnabled, and make sure they are checked. If not, check them and click Save\nIf the page asks for a username/password, the org is still being created. If so, wait five minutes then re-run the command below until sfdx logs you in automatically.",
        "pressEnterWhenPermIsSet": "Press [ENTER] when you've set the perm",
        "enter": "[ENTER]",
        "assumingYouSavedThePerm": "Assuming you saved the perm",
        "waitingForWebStoreId": "Waiting for webstore id to show up...",
        "doneWithStoreId": "done with storeid: ",
        "storeNotCreatedWait10Sec": "Store not yet created, waiting 10 seconds...",
        "stillWaiting": "Still waiting...",
        "waited5MinNoStoreId": "Waited 5 minutes for storeId but storeid still doesn't exist",
        "statusIndicatesCompletedSkipping": "Status file indicates this command is completed successfully, skipping",
        "messageIntentToCreateInfo": "Creates a new store in the org in which the admin is '%s'\nCreates a buyer account with the specified buyer account username '%s'\nThe template name is %s and the store name is %s\nAll usernames must to be lower case.",
        "errorNoScratchOrgExistsWithUsername": "No scratch org exists with username: ",
        "removingSfdxAuthFile": "Removing %s sfdx authentication file...",
        "completedStep6": "Completed Step 6",
        "completedStep7": "Completed Step 7",
        "completedStep8": "Completed Step 8",
        "communityNowAvailable": "Community is now available",
        "openingBrowserTheStoreAdminPage": "Opening the store admin page in the browser...",
        "allDone": "All Done",
        "errorStoreQuickstartCreateFailed": "StoreQuickstartCreate failed",
        "waitingForCommunity": "Waiting for community to become available",
        "communityStillNotAvailableCount": "Community still not available after count: %s retrying",
        "pushingStoreSources": "\nPushing store sources...",
        "using": "Using %s",
        "checkInvalidSession": "INVALID_SESSION_ID: Session expired or invalid",
        "preMessageOpeningPageSessinonRefresh": "%s\nOpening Page to refresh session",
        "done": "done",
        "settingUpStoreBuyerCreateBuyerWithInfo": "Setting up the store and creating the buyer user...\nBuyer username: %s\nBuyer email: %s\nBuyer alias: %s",
        "errorStoreQuickstartSetupFailed": "StoreQuickstartSetup failed",
        "assigningShopperProfileToBuyer": "Assigning Shopper profile to the buyer user",
        "changingPasswordForBuyer": "Changing password for the buyer user",
        "createSearchIndexInfo": "Creating search index. You need %s plugin installed for this to work."
    },
    "quickstart": {
        "setup": {
            "cmdDescription": "Set up a store",
            "orgCreationNotCompletedSuccesfully": "The status file indicates that org creation was not completed succesfully. Please complete org creation before attempting to set up a store.",
            "completedQuickstartStep1": "Completed Quickstart Step 1",
            "completedQuickstartStep2": "Completed Quickstart Step 2",
            "completedQuickstartStep3": "Completed Quickstart Step 3",
            "completedQuickstartStep4": "Completed Quickstart Step 4",
            "completedQuickstartSetup": "Completed Quickstart Setup",
            "usingToRetrieveStoreInfo": "Using this to retrieve your store info: \n%s",
            "getStoreMetadatFromZip": "Retrieving the store metadata and extracting it from the zip file.",
            "setUpIntegrations": "Setting up your integrations",
            "regAndMapIntegrations": "Registering and mapping integrations",
            "doneRegAndMapIntegrations": "Done registering and mapping integrations",
            "regAndMapPriceIntegrations": "Registering and mapping pricing integrations",
            "doneRegAndMapPriceIntegrations": "Done Registering and mapping pricing integrations",
            "urlForResOfMappingIntegrations": "You can view the results of the mapping in the Store Integrations page at %s%s%s",
            "regApexClassForIntegrations": "Registering Apex class %s (%s) for %s integration.",
            "errorRegApexClassForIntegrationsInfo": "There was a problem getting the ID of the Apex class %s for checkout integrations.\nThe registration and mapping for this class will be skipped!\nMake sure that you %s and execute %s before setting up your store.",
            "alreadyMappingInStoreForServiceProviderType": "There is already a mapping in this store for %s ServiceProviderType: %s",
            "registeringInternalPricingForServiceProviderType": "Registering internal pricing (%s) for %s integration.",
            "existingMappingForPriceServiceProviderType": "There is already a mapping in this store for Price ServiceProviderType: %s",
            "registeringCreditCardPaymentIntegration": "Registering credit card payment integration.",
            "insToRegExternalPricingIntegration": "To register an external pricing integration, delete the internal pricing mapping and then add the external pricing mapping.  See the code for details how.",
            "creatingPaymentGatewayProviderRecordUsingApexAdapterId": "Creating PaymentGatewayProvider record using ApexAdapterId=%s.",
            "creatingPaymentGatewayRecordMerchantCredentialIdPaymentGatewayProviderId": "Creating PaymentGateway record using MerchantCredentialId=%s, PaymentGatewayProviderId=%s.",
            "creatingStoreIntegratedServiceWithStorePaymentGatewayId": "Creating StoreIntegratedService using the %s store and Integration=%s (PaymentGatewayId)",
            "updatingMembersListActivatingCommunityAndAddingGuestUser": "Updating members list, activating community and adding guest user.",
            "errorNoBuyerGroupNameProductImportFailed": "No Buyer Group Name - Product Import must have failed",
            "mappingAdminUserToRole": "Mapping Admin User to Role.",
            "thisDeveloperNameAlreadyExists": "This Developer Name already exists or has been previously used.",
            "userRoleAlreadyExists": "User role '%s' already exists",
            "createdUserRole": "Created user role '%s'",
            "creatingBuyerUserWithContactAndAccount": "Creating Buyer User with associated Contact and Account.",
            "makingAccountBuyerAccount": "Making Account a Buyer Account",
            "assigningBuyerAccountToBuyerGroup": "Assigning Buyer Account to Buyer Group.",
            "alreadyBeenAdded": "already been added",
            "startingGuestBuyerAccessSetup": "Starting Guest Buyer Access setup!",
            "makeSiteAndNavMenuItemPublic": "Make Site and Nav Menu Item Public",
            "enableGuestBrowsingForWebStoreAndCreateGuestBuyerProfile": "Enable Guest Browsing for WebStore and create Guest Buyer Profile.",
            "errorGettingGuestBuyerProfileIdOfWebStoreForEnableGuestBrowsing": "There was a problem getting the GuestBuyerProfileId of the WebStore where name is %s for enableGuestBrowsing.\n",
            "doneGuestBuyerAccessSetup": "Done! Guest Buyer Access is set up!",
            "addContactPointAddressesToBuyerAccount": "Add Contact Point Addresses to the Buyer Account.",
            "already1OrMoreContactPointAddressForBuyerAccount": "There is already at least 1 Contact Point Address for your Buyer Account %sJITUserAccount`",
            "settingUpGuestBrowsing": "Setting up Guest Browsing.",
            "checkingB2BorB2C": "Checking if B2B or B2C.",
            "storeTypeDoesNotExist": "Store Type didn't exist",
            "creatingPackageToDeployWithNewFlow": "Creating the package to deploy, including the new flow.",
            "deployNewZipWithFlowIgnoringWarningsCleanUp": "Deploy the new zip including the flow, ignoring warnings, then clean-up.",
            "checkInvalidSession": "INVALID_SESSION_ID: Session expired or invalid",
            "openingPageToRefreshSession": "%s\nOpening Page to refresh session",
            "removingXmlFilesPackageForRetrievingAndDeployingMetadata": "Removing the package xml files used for retrieving and deploying metadata at this step.",
            "publishingCommunityStep7": "7. Publishing the community."
        },
        "create": {
            "cmdDescription": "Use this command to just create a community.  It will use sfdx force:community:create until a community is created or failed.",
            "creatingNewStoreInQueUpTo10Minutes": "Creating a new store, this may take up to 10 minutes until it's available.\n",
            "storeName": "Store name: %s\n",
            "communityTemplate": "Community Template: %s\n",
            "orgUsername": "Org username: %s",
            "creatingCommunity": "Creating Community...",
            "creatingWith": "Creating with %s",
            "storeCreatedByQuickStartScript": "Store %s created by Quick Start script.",
            "failed": "Failed",
            "enterDifferentNameExists": "Enter a different name. That one already exists.",
            "creatingYourCommunity": "We're creating your community",
            "createdByQuickStartScript": "created by Quick Start script",
            "unknownError": "Unknown error:\n",
            "done": "Done"
        }
    },
    "extension": {
        "register": {
            "cmdDescription": "Register an extension with one command",
            "apexClassNameFlagDescription": "Name of the Apex class that needs to be extended",
            "errApexClass": "Error while retrieving the Apex Class:",
            "error": "Error while registering with the given registered extension name:",
            "extensionPointNameDescription": "Means of identifying entry points within the domain code that are capable of being extended by partners.Takes the form domain_sub-domain_interface. E.g: checkout_summary_computeTax",
            "regExtensionNameFlagDescription": "Unique name for extension",
            "errEPN": "Invalid EPN. Run [commerce:extension:points:list] for all valid EPN values",
            "savingConfigIntoConfig": "Successfully registered the extension. Use command [commerce:extension:map] to link the extension to a webstore.",
            "apexNameSpaceFlagDescription": "Optional namespace for apex class",
            "undefinedName": "Undefined registered extension name. Enter '-r <name>'"
        },
        "map": {
            "cmdDescription": "Maps an extension to a specific webstore",
            "StoreNameFlagDescription": "The name of the webstore to map the extension",
            "errStoreName": "Can't find webstore with the name:",
            "errStoreId": "Can't find webstore ID:",
            "error": "Error while mapping the given registered extension name:",
            "extensionPointNameDescription": "Means of identifying entry points within the domain code that are capable of being extended by partners.Takes the form domain_sub-domain_interface. E.g: checkout_summary_computeTax",
            "regExtensionNameFlagDescription": "Unique name for extension",
            "savingConfigIntoConfig": "Successfully mapped the extension",
            "storeId": "Optional webstore ID flag",
            "nonexistent": "Can't find extension with registered extension name:",
            "undefinedName": "Undefined webstore ID and webstore name. Enter either '-i <webstoreId>' or '-n <webstoreName>'.",
            "multiple": "More than one webstore found with the given name. To see all the webstores with the given name, run [sfdx force:data:soql:query -q SELECT ID, NAME FROM WEBSTORE WHERE NAME = '<webstoreName>' --json]"
        },

        "getEPN": {
            "cmdDescription": "Lists all EPN values"
        },
        "unmap": {
            "cmdDescription": "Unmaps an extension from a store",
            "StoreNameFlagDescription": "The name of the webstore to map the extension",
            "errStoreName": "Can't find webstore with the name:",
            "errStoreId": "Can't find webstore ID:",
            "error": "Error while deleting with the given registered extension name:",
            "extensionPointNameDescription": "Means of identifying entry points within the domain code that are capable of being extended by partners.Takes the form domain_sub-domain_interface. E.g: checkout_summary_computeTax",
            "regExtensionNameFlagDescription": "Unique name for extension",
            "savingConfigIntoConfig": "Successfully deleted the extension",
            "storeId": "Optional webstore ID flag",
            "undefinedName": "Undefined webstore ID and webstore name. Enter either '-i <webstoreId>' or '-n <webstoreName>'."
        }
    },
    "view": {
        "cmdDescription": "Open store(s)",
        "errorStoreId": "Could not resolve store to a store id.",
        "all": {
            "cmdDescription": "View all stores"
        },
        "info": {
            "cmdDescription": "Display buyer info",
            "errorNoUserInfo": "No user info, something went wrong",
            "storeUrlBuyerInfo": "Store url: %s\nBuyer username: %s\nBuyer password: %s",
            "savingConfigIntoConfig": "Saving the following config into %s\n%s",
            "noStoreMatch": "No store matched %s %s %s %s"
        }
    }
}
